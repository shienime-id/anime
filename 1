const express = require('express');
const multer = require('multer');
const crypto = require('crypto');
const path = require('path');

// Try to import javascript-obfuscator, fallback if not available
let JavaScriptObfuscator;
try {
    JavaScriptObfuscator = require('javascript-obfuscator');
} catch (error) {
    console.log('⚠️ javascript-obfuscator not found - obfuscation will use fallback method');
    JavaScriptObfuscator = null;
}

const app = express();

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Configure multer for memory storage (Vercel compatible)
const upload = multer({ 
    storage: multer.memoryStorage(),
    fileFilter: (req, file, cb) => {
        if (!file.originalname.toLowerCase().endsWith('.js')) {
            return cb(new Error('Only JavaScript files (.js) are allowed'));
        }
        cb(null, true);
    },
    limits: {
        fileSize: 5 * 1024 * 1024 // 5MB limit
    }
});

// Global file storage for Vercel (memory-based)
global.fileStorage = global.fileStorage || new Map();

// Encryption configurations
const ENCRYPTION_CONFIGS = [
    { name: "AES-256-CBC (2 Layer)", algorithm: "aes-256-cbc", layers: 2, keySize: 32, ivSize: 16 },
    { name: "AES-128-CBC (3 Layer)", algorithm: "aes-128-cbc", layers: 3, keySize: 16, ivSize: 16 },
    { name: "AES-256-CTR (4 Layer)", algorithm: "aes-256-ctr", layers: 4, keySize: 32, ivSize: 16 },
    { name: "AES-128-CTR (5 Layer)", algorithm: "aes-128-ctr", layers: 5, keySize: 16, ivSize: 16 }
];

class CielProtector {
    constructor() {
        this.encryptWatermark = "/* 🔐 Encrypt by CieL >////< */";
        this.obfuscateWatermark = "/* 🎭 Obfuscate by CieL >////< */";
        this.combinedWatermark = "/* 🛡️ Protected by CieL >////< - Ultimate Security */";
        this.signature = "CieL >////<";
    }

    // Generate secure key and IV from password
    generateKeyIV(password, algorithm, keySize, ivSize, layer = 0) {
        const salt = crypto.createHash('sha256')
            .update(`${password}:${algorithm}:${layer}:${this.signature}`)
            .digest();
        
        const key = crypto.pbkdf2Sync(password, salt, 100000, keySize, 'sha512');
        const iv = crypto.pbkdf2Sync(password, salt.reverse(), 100000, ivSize, 'sha512');
        
        return { key, iv };
    }

    // Encrypt single layer
    encryptData(data, algorithm, key, iv) {
        const cipher = crypto.createCipheriv(algorithm, key, iv);
        let encrypted = cipher.update(data, 'utf8', 'hex');
        encrypted += cipher.final('hex');
        return encrypted;
    }

    // Multi-layer encryption with CieL protection
    encryptFile(content, configIndex, password) {
        const config = ENCRYPTION_CONFIGS[configIndex];
        let data = content;
        
        console.log(`🔐 Encrypting with ${config.name} by CieL >////<`);
        
        // Apply encryption layers
        for (let layer = 0; layer < config.layers; layer++) {
            const { key, iv } = this.generateKeyIV(
                password, 
                config.algorithm, 
                config.keySize, 
                config.ivSize, 
                layer
            );
            
            data = this.encryptData(data, config.algorithm, key, iv);
        }

        // Create self-decrypting script with CieL watermark
        return this.createDecryptorTemplate(data, config, password);
    }

    // Create beautiful decryptor template with CieL signature
    createDecryptorTemplate(encryptedData, config, originalPassword) {
        return `${this.encryptWatermark}
/*
██████╗██╗███████╗██╗     
██╔════╝██║██╔════╝██║     
██║     ██║█████╗  ██║     
██║     ██║██╔══╝  ██║     
╚██████╗██║███████╗███████╗
 ╚═════╝╚═╝╚══════╝╚══════╝

🔐 File Encrypted by CieL >////< 
💫 Secure Multi-Layer Protection Active
*/

const crypto = require('crypto');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const ENCRYPTED_DATA = "${encryptedData}";
const CONFIG = ${JSON.stringify(config)};
const SIGNATURE = "${this.signature}";

console.log('\\n🎀 ═══════════════════════════════════════ 🎀');
console.log('🌸    File Protected by CieL >////<     🌸');  
console.log('🎀 ═══════════════════════════════════════ 🎀\\n');

function generateKeyIV(password, algorithm, keySize, ivSize, layer = 0) {
    const salt = crypto.createHash('sha256')
        .update(password + ':' + algorithm + ':' + layer + ':' + SIGNATURE)
        .digest();
    
    const key = crypto.pbkdf2Sync(password, salt, 100000, keySize, 'sha512');
    const iv = crypto.pbkdf2Sync(password, salt.reverse(), 100000, ivSize, 'sha512');
    
    return { key, iv };
}

function decryptData(data, algorithm, key, iv) {
    try {
        const decipher = crypto.createDecipheriv(algorithm, key, iv);
        let decrypted = decipher.update(data, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return decrypted;
    } catch (error) {
        throw new Error('Decryption failed');
    }
}

function decrypt(password) {
    let data = ENCRYPTED_DATA;
    
    try {
        console.log('🔓 Decrypting with CieL protection...');
        console.log('✨ Processing ' + CONFIG.layers + ' security layers...');
        
        for (let layer = CONFIG.layers - 1; layer >= 0; layer--) {
            process.stdout.write('🌟 Layer ' + (CONFIG.layers - layer) + '/' + CONFIG.layers + '... ');
            
            const { key, iv } = generateKeyIV(
                password,
                CONFIG.algorithm,
                CONFIG.keySize,
                CONFIG.ivSize,
                layer
            );
            
            data = decryptData(data, CONFIG.algorithm, key, iv);
            console.log('✅ OK');
        }
        
        console.log('\\n🎉 ═══════════════════════════════════════ 🎉');
        console.log('💕  Decryption successful by CieL >////<  💕');
        console.log('🎉 ═══════════════════════════════════════ 🎉\\n');
        
        console.log('🚀 Executing your protected code...\\n');
        eval(data);
        
    } catch (error) {
        console.log('\\n❌ ═══════════════════════════════════════ ❌');
        console.log('💔    Decryption failed! Wrong password    💔');
        console.log('🔒    CieL protection is active >////<     🔒');
        console.log('❌ ═══════════════════════════════════════ ❌\\n');
        process.exit(1);
    }
}

console.log('🌟 Algorithm: ' + CONFIG.algorithm.toUpperCase());
console.log('🔢 Layers: ' + CONFIG.layers);
console.log('🎀 Made with 💖 by CieL >////<\\n');

rl.question('🔐 Enter your secret password: ', (password) => {
    rl.close();
    decrypt(password.trim());
});

${this.encryptWatermark}`;
    }

    // Advanced obfuscation with CieL watermark
    obfuscateCode(code, version) {
        if (!JavaScriptObfuscator) {
            // Fallback obfuscation when library is not available
            return this.fallbackObfuscation(code, version);
        }

        const configs = {
            basic: {
                compact: true,
                controlFlowFlattening: false,
                deadCodeInjection: false,
                debugProtection: false,
                disableConsoleOutput: false,
                stringArray: true,
                stringArrayEncoding: ['base64'],
                stringArrayThreshold: 0.75,
                target: 'node'
            },
            professional: {
                compact: true,
                controlFlowFlattening: true,
                controlFlowFlatteningThreshold: 0.5,
                deadCodeInjection: true,
                deadCodeInjectionThreshold: 0.3,
                debugProtection: false,
                disableConsoleOutput: false,
                stringArray: true,
                stringArrayEncoding: ['base64', 'rc4'],
                stringArrayThreshold: 0.8,
                selfDefending: true,
                target: 'node'
            },
            extreme: {
                compact: true,
                controlFlowFlattening: true,
                controlFlowFlatteningThreshold: 0.75,
                deadCodeInjection: true,
                deadCodeInjectionThreshold: 0.6,
                debugProtection: false,
                disableConsoleOutput: false,
                stringArray: true,
                stringArrayEncoding: ['base64', 'rc4'],
                stringArrayThreshold: 0.9,
                selfDefending: true,
                numbersToExpressions: true,
                splitStrings: true,
                transformObjectKeys: true,
                target: 'node'
            },
            ultimate: {
                compact: true,
                controlFlowFlattening: true,
                controlFlowFlatteningThreshold: 0.9,
                deadCodeInjection: true,
                deadCodeInjectionThreshold: 0.8,
                debugProtection: false,
                disableConsoleOutput: false,
                stringArray: true,
                stringArrayEncoding: ['base64', 'rc4'],
                stringArrayThreshold: 1,
                selfDefending: true,
                numbersToExpressions: true,
                splitStrings: true,
                splitStringsChunkLength: 6,
                transformObjectKeys: true,
                stringArrayWrappersCount: 4,
                stringArrayWrappersChainedCalls: true,
                target: 'node'
            }
        };

        try {
            console.log(`🎭 Obfuscating with ${version} level by CieL >////<`);
            
            const config = configs[version] || configs.basic;
            const obfuscationResult = JavaScriptObfuscator.obfuscate(code, config);
            const obfuscatedCode = obfuscationResult.getObfuscatedCode();
            
            // Add beautiful CieL watermark
            return `${this.obfuscateWatermark}

// ╔═══════════════════════════════════════════════════════════╗
// ║                🎭 Code Obfuscated by CieL >////<          ║
// ║                    🌟 Level: ${version.toUpperCase().padEnd(12)} 🌟                    ║
// ║                 💖 Made with love and magic 💖            ║
// ╚═══════════════════════════════════════════════════════════╝

${obfuscatedCode}

${this.obfuscateWatermark}`;
            
        } catch (error) {
            console.error('Obfuscation error:', error);
            return this.fallbackObfuscation(code, version);
        }
    }

    // Fallback obfuscation when main library fails
    fallbackObfuscation(code, version) {
        console.log(`🎭 Using fallback obfuscation (${version}) by CieL >////<`);
        
        // Simple but effective obfuscation
        const encoded = Buffer.from(code).toString('base64');
        const chunks = [];
        const chunkSize = 80;
        
        for (let i = 0; i < encoded.length; i += chunkSize) {
            chunks.push(encoded.substr(i, chunkSize));
        }
        
        const varNames = ['_0x' + Math.random().toString(16).substr(2, 6)];
        const chunkVars = chunks.map((_, i) => '_0x' + Math.random().toString(16).substr(2, 6));
        
        let obfuscatedCode = `${this.obfuscateWatermark}

// ╔═══════════════════════════════════════════════════════════╗
// ║            🎭 Fallback Obfuscation by CieL >////<         ║
// ║                    🌟 Level: ${version.toUpperCase().padEnd(12)} 🌟                    ║
// ║                 💖 Simple but effective 💖                ║
// ╚═══════════════════════════════════════════════════════════╝

`;

        chunks.forEach((chunk, i) => {
            obfuscatedCode += `var ${chunkVars[i]}='${chunk}';`;
        });
        
        obfuscatedCode += `
var ${varNames[0]}=${chunkVars.join('+')};
(function(_0xdata){
    try{
        eval(Buffer.from(_0xdata,'base64').toString('utf8'));
    }catch(_0xe){
        console.log('🔒 Protected by CieL >////<');
    }
})(${varNames[0]});

${this.obfuscateWatermark}`;

        return obfuscatedCode;
    }

    // Clean old files from memory storage
    cleanupOldFiles() {
        const oneHourAgo = Date.now() - (60 * 60 * 1000);
        let cleaned = 0;
        
        for (const [filename, fileData] of global.fileStorage.entries()) {
            if (fileData.timestamp < oneHourAgo) {
                global.fileStorage.delete(filename);
                cleaned++;
            }
        }
        
        if (cleaned > 0) {
            console.log(`🧹 Cleaned ${cleaned} old files by CieL >////<`);
        }
    }
}

const ciel = new CielProtector();

// Main route with beautiful UI
app.get('/', (req, res) => {
    res.send(`
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🔐 SecureCode Pro - by CieL >////< 💖</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🔐</text></svg>">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            min-height: 100vh;
            padding: 15px;
            animation: backgroundShift 10s ease-in-out infinite;
        }

        @keyframes backgroundShift {
            0%, 100% { background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%); }
            50% { background: linear-gradient(135deg, #f093fb 0%, #f5576c 50%, #4facfe 100%); }
        }

        .container {
            max-width: 950px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.98);
            border-radius: 25px;
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            backdrop-filter: blur(15px);
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .header {
            background: linear-gradient(135deg, #ff6b6b, #feca57, #48dbfb);
            color: white;
            padding: 45px 35px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.2), transparent);
            animation: shimmer 4s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .header h1 {
            font-size: clamp(2.2rem, 6vw, 3.5rem);
            margin-bottom: 15px;
            font-weight: 900;
            text-shadow: 0 3px 6px rgba(0,0,0,0.2);
            position: relative;
            z-index: 1;
            letter-spacing: -1px;
        }

        .header .subtitle {
            font-size: clamp(1.1rem, 3vw, 1.4rem);
            opacity: 0.95;
            position: relative;
            z-index: 1;
            margin-bottom: 20px;
        }

        .ciel-signature {
            font-size: 1.1rem;
            font-weight: 700;
            opacity: 0.9;
            position: relative;
            z-index: 1;
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 25px;
            border-radius: 25px;
            display: inline-block;
            margin-top: 10px;
            backdrop-filter: blur(10px);
            animation: pulse 3s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 0.9; }
            50% { transform: scale(1.05); opacity: 1; }
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 25px;
            margin: 35px 0 25px;
        }

        .feature-card {
            background: rgba(255, 255, 255, 0.15);
            padding: 25px 20px;
            border-radius: 20px;
            text-align: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .feature-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.25);
        }

        .feature-icon {
            font-size: 2.5rem;
            margin-bottom: 12px;
            display: block;
        }

        .feature-title {
            font-weight: 700;
            margin-bottom: 5px;
        }

        .form-container {
            padding: 50px 40px;
        }

        .form-group {
            margin-bottom: 35px;
        }

        .form-label {
            display: block;
            margin-bottom: 15px;
            font-weight: 800;
            color: #2c3e50;
            font-size: 1.3rem;
            letter-spacing: -0.5px;
        }

        .file-drop-zone {
            border: 3px dashed #cbd5e0;
            border-radius: 20px;
            padding: 40px 30px;
            text-align: center;
            background: linear-gradient(145deg, #f8fafc, #f1f5f9);
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .file-drop-zone::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(99, 102, 241, 0.1), transparent);
            transition: left 0.8s;
        }

        .file-drop-zone:hover {
            border-color: #6366f1;
            background: linear-gradient(145deg, #eef2ff, #e0e7ff);
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(99, 102, 241, 0.2);
        }

        .file-drop-zone:hover::before {
            left: 100%;
        }

        .file-drop-zone.drag-over {
            border-color: #10b981;
            background: linear-gradient(145deg, #ecfdf5, #d1fae5);
            transform: scale(1.02);
        }

        .file-input {
            position: absolute;
            opacity: 0;
            pointer-events: none;
        }

        .file-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            color: #6b7280;
        }

        .file-text {
            font-size: 1.2rem;
            font-weight: 600;
            color: #4b5563;
            margin-bottom: 8px;
        }

        .file-subtext {
            font-size: 1rem;
            color: #6b7280;
        }

        .selected-file {
            margin-top: 15px;
            padding: 15px 20px;
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            border-radius: 12px;
            font-weight: 600;
            display: none;
        }

        .protection-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 35px;
        }

        .option-card {
            border: 3px solid #e2e8f0;
            border-radius: 20px;
            padding: 35px 25px;
            text-align: center;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            background: linear-gradient(145deg, #ffffff, #f8fafc);
            position: relative;
            overflow: hidden;
        }

        .option-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, transparent, rgba(99, 102, 241, 0.05), transparent);
            opacity: 0;
            transition: opacity 0.3s;
        }

        .option-card:hover {
            border-color: #6366f1;
            transform: translateY(-10px) scale(1.03);
            box-shadow: 0 25px 50px rgba(99, 102, 241, 0.2);
        }

        .option-card:hover::before {
            opacity: 1;
        }

        .option-card.active {
            border-color: #6366f1;
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            color: white;
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(99, 102, 241, 0.4);
        }

        .option-card.active::before {
            background: rgba(255, 255, 255, 0.1);
            opacity: 1;
        }

        .option-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            position: relative;
            z-index: 1;
        }

        .option-title {
            font-size: 1.5rem;
            font-weight: 800;
            margin-bottom: 12px;
            position: relative;
            z-index: 1;
        }

        .option-description {
            font-size: 1rem;
            line-height: 1.5;
            opacity: 0.85;
            position: relative;
            z-index: 1;
        }

        .config-panel {
            background: linear-gradient(145deg, #f8fafc, #f1f5f9);
            padding: 35px;
            border-radius: 20px;
            margin-bottom: 35px;
            display: none;
            border: 2px solid #e2e8f0;
            animation: slideIn 0.5s ease-out;
        }

        .config-panel.active {
            display: block;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .config-title {
            font-size: 1.5rem;
            font-weight: 800;
            color: #2c3e50;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-select, .form-input {
            width: 100%;
            padding: 18px 22px;
            border: 2px solid #e2e8f0;
            border-radius: 15px;
            font-size: 1.1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            background: white;
            color: #2c3e50;
        }

        .form-select:focus, .form-input:focus {
            outline: none;
            border-color: #6366f1;
            box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.1);
            transform: translateY(-2px);
        }

        .submit-button {
            width: 100%;
            padding: 22px;
            background: linear-gradient(135deg, #6366f1, #8b5cf6, #ec4899);
            color: white;
            border: none;
            border-radius: 18px;
            font-size: 1.4rem;
            font-weight: 800;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
            margin-top: 20px;
        }

        .submit-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.8s;
        }

        .submit-button:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 40px rgba(99, 102, 241, 0.5);
            background: linear-gradient(135deg, #5b21b6, #7c3aed, #db2777);
        }

        .submit-button:hover::before {
            left: 100%;
        }

        .submit-button:active {
            transform: translateY(-1px);
        }

        .submit-button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .loading-panel {
            display: none;
            text-align: center;
            margin: 35px 0;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .spinner {
            width: 60px;
            height: 60px;
            border: 6px solid rgba(99, 102, 241, 0.1);
            border-top: 6px solid #6366f1;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 25px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-text {
            font-size: 1.2rem;
            font-weight: 600;
            color: #4b5563;
        }

        .result-panel {
            margin-top: 35px;
            padding: 35px;
            border-radius: 20px;
            display: none;
            font-weight: 600;
            animation: slideIn 0.5s ease-out;
        }

        .result-panel.success {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            box-shadow: 0 15px 40px rgba(16, 185, 129, 0.3);
        }

        .result-panel.error {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            box-shadow: 0 15px 40px rgba(239, 68, 68, 0.3);
        }

        .result-title {
            font-size: 1.6rem;
            font-weight: 800;
            margin-bottom: 20px;
        }

        .result-details {
            background: rgba(255, 255, 255, 0.15);
            padding: 25px;
            border-radius: 15px;
            margin: 20px 0;
            backdrop-filter: blur(10px);
        }

        .download-button {
            display: inline-block;
            margin-top: 25px;
            padding: 15px 30px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            text-decoration: none;
            border-radius: 12px;
            font-weight: 700;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .download-button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .footer {
            text-align: center;
            margin-top: 50px;
            padding: 30px;
            background: rgba(0, 0, 0, 0.05);
            border-radius: 15px;
            color: #64748b;
        }

        .footer-main {
            font-size: 1.1rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .footer-sub {
            font-size: 0.95rem;
            margin-bottom: 15px;
        }

        .footer-ciel {
            font-size: 1rem;
            color: #ec4899;
            font-weight: 700;
            animation: heartbeat 2s ease-in-out infinite;
        }

        @keyframes heartbeat {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        @media (max-width: 768px) {
            .form-container {
                padding: 30px 25px;
            }
            
            .header {
                padding: 30px 25px;
            }
            
            .protection-options {
                grid-template-columns: 1fr;
            }
            
            .config-panel {
                padding: 25px 20px;
            }
            
            .features-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 15px;
            }
        }

        @media (max-width: 480px) {
            .file-drop-zone {
                padding: 25px 20px;
            }
            
            .option-card {
                padding: 25px 20px;
            }
            
            .submit-button {
                font-size: 1.2rem;
                padding: 18px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔐 SecureCode Pro</h1>
            <div class="subtitle">Advanced JavaScript Protection Platform</div>
            <div class="ciel-signature">✨ Created by CieL >////< ✨</div>
            
            <div class="features-grid">
                <div class="feature-card">
                    <span class="feature-icon">🛡️</span>
                    <div class="feature-title">Military-Grade</div>
                    <div>AES Encryption</div>
                </div>
                <div class="feature-card">
                    <span class="feature-icon">🎭</span>
                    <div class="feature-title">Advanced</div>
                    <div>Obfuscation</div>
                </div>
                <div class="feature-card">
                    <span class="feature-icon">⚡</span>
                    <div class="feature-title">Lightning</div>
                    <div>Fast</div>
                </div>
                <div class="feature-card">
                    <span class="feature-icon">🌐</span>
                    <div class="feature-title">Cloud</div>
                    <div>Powered</div>
                </div>
            </div>
        </div>

        <div class="form-container">
            <form id="protectionForm" enctype="multipart/form-data">
                <div class="form-group">
                    <label class="form-label">📁 Upload Your JavaScript File</label>
                    <div class="file-drop-zone" id="dropZone">
                        <div class="file-icon">🎯</div>
                        <div class="file-text">Drop your .js file here or click to browse</div>
                        <div class="file-subtext">Maximum file size: 5MB • Only .js files allowed</div>
                        <input type="file" id="fileInput" name="file" accept=".js" class="file-input" required>
                        <div class="selected-file" id="selectedFile"></div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">🎯 Choose Your Protection Method</label>
                    <div class="protection-options">
                        <div class="option-card" data-option="encrypt">
                            <div class="option-icon">🔐</div>
                            <div class="option-title">Encryption Only</div>
                            <div class="option-description">Multi-layer AES encryption with password protection and beautiful self-decrypting capability by CieL >////<</div>
                        </div>
                        <div class="option-card" data-option="obfuscate">
                            <div class="option-icon">🎭</div>
                            <div class="option-title">Obfuscation Only</div>
                            <div class="option-description">Advanced code transformation to hide implementation details and logic flow with CieL's magic touch</div>
                        </div>
                        <div class="option-card active" data-option="both">
                            <div class="option-icon">🛡️</div>
                            <div class="option-title">Ultimate Protection</div>
                            <div class="option-description">Combined encryption and obfuscation for maximum security and code protection - CieL's premium service >////<</div>
                        </div>
                    </div>
                </div>

                <div id="encryptConfig" class="config-panel active">
                    <div class="config-title">
                        <span>🔐</span>
                        Encryption Configuration by CieL
                    </div>
                    <div class="form-group">
                        <label class="form-label">Encryption Algorithm</label>
                        <select name="encryptionType" class="form-select">
                            <option value="0">AES-256-CBC (2 Layers) - Balanced Security</option>
                            <option value="1">AES-128-CBC (3 Layers) - Fast Processing</option>
                            <option value="2" selected>AES-256-CTR (4 Layers) - High Security ⭐</option>
                            <option value="3">AES-128-CTR (5 Layers) - Maximum Layers</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">🔑 Master Password</label>
                        <input type="password" name="password" class="form-input" placeholder="Enter a strong password (minimum 8 characters)" minlength="8">
                        <div style="margin-top: 10px; font-size: 0.9em; color: #6b7280;">
                            💡 Tip: Use a mix of letters, numbers, and symbols for better security!
                        </div>
                    </div>
                </div>

                <div id="obfuscateConfig" class="config-panel active">
                    <div class="config-title">
                        <span>🎭</span>
                        Obfuscation Configuration by CieL
                    </div>
                    <div class="form-group">
                        <label class="form-label">Protection Level</label>
                        <select name="obfuscationType" class="form-select">
                            <option value="basic">Basic - Standard protection, fast processing</option>
                            <option value="professional" selected>Professional - Enhanced security with control flow ⭐</option>
                            <option value="extreme">Extreme - Advanced protection with dead code injection</option>
                            <option value="ultimate">Ultimate - Maximum protection with all CieL features 🚀</option>
                        </select>
                        <div style="margin-top: 10px; font-size: 0.9em; color: #6b7280;">
                            🌟 Higher levels provide better protection but may increase file size
                        </div>
                    </div>
                </div>

                <button type="submit" class="submit-button" id="submitBtn">
                    🚀 Protect My Code with CieL Magic
                </button>
            </form>

            <div class="loading-panel" id="loadingPanel">
                <div class="spinner"></div>
                <div class="loading-text">🔮 CieL is working her magic on your code...</div>
                <div style="margin-top: 10px; font-size: 0.9em; color: #6b7280;">
                    This may take a few moments depending on your file size and protection level
                </div>
            </div>

            <div class="result-panel" id="resultPanel"></div>

            <div class="footer">
                <div class="footer-main">🚀 Powered by Vercel Edge Functions</div>
                <div class="footer-sub">Secure • Fast • Reliable • Global CDN</div>
                <div class="footer-ciel">💖 Made with love by CieL >////< 💖</div>
            </div>
        </div>
    </div>

    <script>
        // Enhanced file handling with drag & drop
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const selectedFile = document.getElementById('selectedFile');

        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // Highlight drop zone when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });

        function highlight(e) {
            dropZone.classList.add('drag-over');
        }

        function unhighlight(e) {
            dropZone.classList.remove('drag-over');
        }

        // Handle dropped files
        dropZone.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;

            if (files.length > 0) {
                handleFileSelect(files[0]);
            }
        }

        // Handle file input change
        fileInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleFileSelect(e.target.files[0]);
            }
        });

        // Handle file selection
        function handleFileSelect(file) {
            if (!file.name.toLowerCase().endsWith('.js')) {
                showResult('error', '❌ Only JavaScript files (.js) are allowed!', 'Please select a valid .js file and try again.');
                return;
            }

            if (file.size > 5 * 1024 * 1024) {
                showResult('error', '📁 File too large!', 'Maximum file size is 5MB. Please choose a smaller file.');
                fileInput.value = '';
                return;
            }

            const sizeInKB = (file.size / 1024).toFixed(1);
            selectedFile.innerHTML = \`
                <div style="display: flex; align-items: center; gap: 15px;">
                    <span style="font-size: 2rem;">📄</span>
                    <div>
                        <div style="font-weight: 700; margin-bottom: 5px;">\${file.name}</div>
                        <div style="opacity: 0.8;">📏 Size: \${sizeInKB} KB • ✅ Ready for CieL protection</div>
                    </div>
                </div>
            \`;
            selectedFile.style.display = 'block';

            // Update file input
            const dt = new DataTransfer();
            dt.items.add(file);
            fileInput.files = dt.files;
        }

        // Click to browse
        dropZone.addEventListener('click', () => {
            fileInput.click();
        });

        // Protection method selection
        document.querySelectorAll('.option-card').forEach(card => {
            card.addEventListener('click', function() {
                // Remove active class from all cards
                document.querySelectorAll('.option-card').forEach(c => c.classList.remove('active'));
                // Add active class to clicked card
                this.classList.add('active');
                
                const option = this.dataset.option;
                const encryptConfig = document.getElementById('encryptConfig');
                const obfuscateConfig = document.getElementById('obfuscateConfig');
                const passwordInput = document.querySelector('input[name="password"]');
                
                // Show/hide config sections based on selection
                if (option === 'encrypt') {
                    encryptConfig.classList.add('active');
                    obfuscateConfig.classList.remove('active');
                    passwordInput.required = true;
                } else if (option === 'obfuscate') {
                    encryptConfig.classList.remove('active');
                    obfuscateConfig.classList.add('active');
                    passwordInput.required = false;
                } else { // both
                    encryptConfig.classList.add('active');
                    obfuscateConfig.classList.add('active');
                    passwordInput.required = true;
                }
            });
        });

        // Form submission
        document.getElementById('protectionForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const selectedOption = document.querySelector('.option-card.active').dataset.option;
            formData.append('processType', selectedOption);
            
            const submitBtn = document.getElementById('submitBtn');
            const loadingPanel = document.getElementById('loadingPanel');
            const resultPanel = document.getElementById('resultPanel');
            
            // Validate inputs
            if (!fileInput.files[0]) {
                showResult('error', '📁 No file selected!', 'Please select a JavaScript file to protect with CieL magic.');
                return;
            }

            if ((selectedOption === 'encrypt' || selectedOption === 'both')) {
                const password = formData.get('password');
                if (!password || password.length < 8) {
                    showResult('error', '🔑 Password too weak!', 'Password must be at least 8 characters long for proper CieL encryption.');
                    return;
                }
            }
            
            // Show loading state
            submitBtn.disabled = true;
            submitBtn.textContent = '🔮 CieL is casting protection spells...';
            loadingPanel.style.display = 'block';
            resultPanel.style.display = 'none';
            
            // Scroll to loading panel
            loadingPanel.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            try {
                const response = await fetch('/api/process', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showSuccessResult(data, selectedOption);
                } else {
                    showResult('error', '❌ Processing Failed', data.error || 'An unexpected error occurred. Please try again.');
                }
            } catch (error) {
                console.error('Network error:', error);
                showResult('error', '🌐 Network Error', 'Failed to connect to CieL\\'s servers. Please check your connection and try again.');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = '🚀 Protect My Code with CieL Magic';
                loadingPanel.style.display = 'none';
            }
        });

        // Show success result
        function showSuccessResult(data, selectedOption) {
            const compressionRatio = ((data.finalSize / data.originalSize - 1) * 100).toFixed(1);
            const compressionText = compressionRatio > 0 ? 
                \`📈 Size increase: \${compressionRatio}% (due to protection layers)\` : 
                \`📉 Size reduction: \${Math.abs(compressionRatio)}%\`;
            
            const protectionType = {
                'encrypt': '🔐 Encryption',
                'obfuscate': '🎭 Obfuscation', 
                'both': '🛡️ Ultimate Protection'
            };

            document.getElementById('resultPanel').className = 'result-panel success';
            document.getElementById('resultPanel').innerHTML = \`
                <div class="result-title">✅ Success! Your code is now protected by CieL >////<</div>
                
                <div class="result-details">
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 20px;">
                        <div>
                            <div style="opacity: 0.8; margin-bottom: 5px;">📁 Original File</div>
                            <div style="font-weight: 700;">\${data.originalName}</div>
                        </div>
                        <div>
                            <div style="opacity: 0.8; margin-bottom: 5px;">🔒 Protection Method</div>
                            <div style="font-weight: 700;">\${protectionType[selectedOption]} by CieL</div>
                        </div>
                        <div>
                            <div style="opacity: 0.8; margin-bottom: 5px;">📊 Original Size</div>
                            <div style="font-weight: 700;">\${(data.originalSize / 1024).toFixed(1)} KB</div>
                        </div>
                        <div>
                            <div style="opacity: 0.8; margin-bottom: 5px;">📈 Protected Size</div>
                            <div style="font-weight: 700;">\${(data.finalSize / 1024).toFixed(1)} KB</div>
                        </div>
                    </div>
                    
                    <div style="text-align: center; padding: 15px; background: rgba(255,255,255,0.1); border-radius: 10px;">
                        <strong>\${compressionText}</strong>
                    </div>
                </div>
                
                <div style="text-align: center;">
                    <a href="/api/download/\${data.filename}" class="download-button" download>
                        💾 Download Protected File (by CieL >////<)
                    </a>
                </div>
                
                <div style="margin-top: 20px; text-align: center; font-size: 0.95em; opacity: 0.9;">
                    \${selectedOption.includes('encrypt') ? '🔐 <strong>Important:</strong> Save your password safely to decrypt the file later!<br>' : ''}
                    💕 Your code is now secured with CieL\\'s magical protection >////<
                    <br>🎉 Thank you for using SecureCode Pro!
                </div>
            \`;
            document.getElementById('resultPanel').style.display = 'block';
            
            // Scroll to result
            document.getElementById('resultPanel').scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        // Show error/success result
        function showResult(type, title, message) {
            const resultPanel = document.getElementById('resultPanel');
            resultPanel.className = \`result-panel \${type}\`;
            resultPanel.innerHTML = \`
                <div class="result-title">\${title}</div>
                <div style="font-size: 1.1rem; line-height: 1.6;">
                    \${message}
                </div>
                <div style="margin-top: 15px; font-size: 0.9em; opacity: 0.8;">
                    💡 Need help? CieL >////< is always here to assist you!
                </div>
            \`;
            resultPanel.style.display = 'block';
            
            // Scroll to result
            resultPanel.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        // Add some interactive effects
        document.querySelectorAll('.form-select, .form-input').forEach(element => {
            element.addEventListener('focus', function() {
                this.parentElement.style.transform = 'scale(1.02)';
                this.parentElement.style.transition = 'transform 0.3s ease';
            });
            
            element.addEventListener('blur', function() {
                this.parentElement.style.transform = 'scale(1)';
            });
        });

        // Console welcome message
        console.log(\`
🎀 ═══════════════════════════════════════ 🎀
🌸         Welcome to SecureCode Pro!      🌸
🌸              by CieL >////<             🌸  
🎀 ═══════════════════════════════════════ 🎀

💖 Thanks for using my protection service!
🔐 Your code will be secured with love and magic
🌟 Have a wonderful day! >////<

        \`);
    </script>
</body>
</html>
    `);
});

// API Routes

// Process file endpoint
app.post('/api/process', upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: 'No file uploaded. Please select a JavaScript file.' });
        }

        const { processType, encryptionType, password, obfuscationType } = req.body;
        
        // Validate process type
        if (!processType || !['encrypt', 'obfuscate', 'both'].includes(processType)) {
            return res.status(400).json({ error: 'Invalid process type selected.' });
        }

        // Validate password for encryption
        if ((processType === 'encrypt' || processType === 'both')) {
            if (!password || password.length < 8) {
                return res.status(400).json({ error: 'Password must be at least 8 characters long for encryption.' });
            }
        }

        // Read file content from buffer
        const originalContent = req.file.buffer.toString('utf8');
        let processedContent = originalContent;

        // Validate JavaScript syntax
        try {
            new Function(originalContent);
        } catch (syntaxError) {
            return res.status(400).json({ 
                error: 'Invalid JavaScript syntax detected. Please check your code and try again.' 
            });
        }

        console.log(`🎭 Processing ${req.file.originalname} with ${processType} by CieL >////<`);

        // Apply processing based on selected type
        if (processType === 'encrypt' || processType === 'both') {
            const encType = parseInt(encryptionType) || 2; // Default to AES-256-CTR
            if (encType < 0 || encType >= ENCRYPTION_CONFIGS.length) {
                return res.status(400).json({ error: 'Invalid encryption type selected.' });
            }
            processedContent = ciel.encryptFile(processedContent, encType, password);
        }

        if (processType === 'obfuscate' || processType === 'both') {
            const obfType = obfuscationType || 'professional';
            if (!['basic', 'professional', 'extreme', 'ultimate'].includes(obfType)) {
                return res.status(400).json({ error: 'Invalid obfuscation type selected.' });
            }
            processedContent = ciel.obfuscateCode(processedContent, obfType);
        }

        // Add combined watermark for both methods
        if (processType === 'both') {
            processedContent = `${ciel.combinedWatermark}\n\n${processedContent}\n\n${ciel.combinedWatermark}`;
        }

        // Generate unique filename
        const originalName = path.parse(req.file.originalname).name;
        const extension = path.parse(req.file.originalname).ext;
        const outputFilename = `${originalName}_${processType}_by_ciel${extension}`;

        // Store in memory with metadata
        global.fileStorage.set(outputFilename, {
            content: processedContent,
            timestamp: Date.now(),
            originalName: req.file.originalname,
            processType: processType,
            size: processedContent.length
        });

        // Clean up old files
        ciel.cleanupOldFiles();

        console.log(`✅ Successfully processed ${outputFilename} by CieL >////<`);

        res.json({
            success: true,
            filename: outputFilename,
            originalName: req.file.originalname,
            originalSize: originalContent.length,
            finalSize: processedContent.length,
            processType: processType,
            timestamp: timestamp
        });

    } catch (error) {
        console.error('Processing error by CieL:', error);
        res.status(500).json({ 
            error: 'Internal server error occurred while processing your file. CieL >////< is working to fix this!' 
        });
    }
});

// Download endpoint
app.get('/api/download/:filename', (req, res) => {
    try {
        const filename = req.params.filename;
        
        // Security validation
        if (filename.includes('..') || filename.includes('/') || filename.includes('\\')) {
            return res.status(400).json({ error: 'Invalid filename detected.' });
        }

        if (!global.fileStorage || !global.fileStorage.has(filename)) {
            return res.status(404).json({ 
                error: 'File not found or expired. Files are automatically cleaned after 1 hour for security.' 
            });
        }

        const fileData = global.fileStorage.get(filename);
        
        // Set appropriate headers
        res.setHeader('Content-Type', 'application/javascript');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
        res.setHeader('X-Protected-By', 'CieL >////<');
        
        console.log(`📦 Downloaded ${filename} by CieL >////<`);
        
        // Send file content
        res.send(fileData.content);
        
    } catch (error) {
        console.error('Download error:', error);
        res.status(500).json({ error: 'Failed to download file. CieL >////< encountered an error.' });
    }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'healthy', 
        message: 'CieL >////< protection service is running smoothly!',
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'development',
        filesInMemory: global.fileStorage ? global.fileStorage.size : 0,
        obfuscatorAvailable: !!JavaScriptObfuscator
    });
});

// API info endpoint
app.get('/api', (req, res) => {
    res.json({
        name: 'SecureCode Pro API',
        version: '2.0.0',
        author: 'CieL >////<',
        description: 'Advanced JavaScript protection with encryption and obfuscation',
        endpoints: {
            'POST /api/process': 'Process and protect JavaScript files',
            'GET /api/download/:filename': 'Download protected files',
            'GET /api/health': 'Health check endpoint',
            'GET /api': 'API information'
        },
        features: [
            '🔐 Multi-layer AES encryption (up to 5 layers)',
            '🎭 Advanced code obfuscation (4 levels)',
            '🛡️ Combined protection methods',
            '💾 Memory-based file storage (Vercel compatible)',
            '🧹 Automatic file cleanup after 1 hour',
            '💖 Beautiful watermarks by CieL >////<'
        ]
    });
});

// Error handling middleware
app.use((error, req, res, next) => {
    console.error('Unhandled error by CieL:', error);
    
    if (error instanceof multer.MulterError) {
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({ 
                error: 'File too large! Maximum size is 5MB. CieL >////< needs smaller files to work properly.' 
            });
        }
        return res.status(400).json({ 
            error: 'File upload error: ' + error.message 
        });
    }
    
    res.status(500).json({ 
        error: 'Internal server error. CieL >////< is working to fix this issue!' 
    });
});

// 404 handler
app.use('*', (req, res) => {
    res.status(404).json({ 
        error: 'Endpoint not found',
        message: "The requested endpoint does not exist on CieL's server >////<",
        availableEndpoints: [
            'GET /',
            'POST /api/process',
            'GET /api/download/:filename',
            'GET /api/health',
            'GET /api'
        ]
    });
});

// Export for Vercel
module.exports = app;

// Local development server
if (require.main === module) {
    const PORT = process.env.PORT || 7860;
    app.listen(PORT, () => {
        console.log(`
🎀 ═══════════════════════════════════════════════════════════ 🎀
🌸                SecureCode Pro Server Started!              🌸
🌸                    by CieL >////< 💖                       🌸
🎀 ═══════════════════════════════════════════════════════════ 🎀

🚀 Server: http://localhost:${PORT}
🔐 Environment: ${process.env.NODE_ENV || 'development'}
🎭 Obfuscator: ${JavaScriptObfuscator ? 'Available ✅' : 'Fallback Mode ⚠️'}
💾 Storage: Memory-based (Vercel compatible)
🧹 Auto-cleanup: Active (1 hour retention)

💕 Ready to protect your code with love and magic!
        `);
    });
}
